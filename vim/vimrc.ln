source ~/.vim/vam-init.vim

let vam_addons = [
  \ 'github:altercation/vim-colors-solarized',
  \ 'ctrlp',
  \ 'tComment',
  \ 'fugitive',
  \ 'surround',
  \ 'rails',
  \ 'rake',
  \ 'github:tpope/vim-bundler',
  \ 'unimpaired',
  \ 'repeat',
  \ 'vimux',
  \ 'snipmate',
  \ ]

call SetupVAM(vam_addons)

" we now return to your regularly scheduled .vimrc
let mapleader = ','
set nocompatible
filetype indent plugin on

" backup files
set backupdir=~/.vim/tmp
set directory=~/.vim/tmp

" solarized setup
syntax enable
let g:solarized_termcolors=256
set background=light
colorscheme solarized

" display customization
set number
set ruler
set laststatus=2
set encoding=utf-8
set cursorline
set showmatch
" preserve scrollback - http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

" statusline originally from janus
set statusline=%f\ %m\ %r
set statusline+=Line:%l/%L[%p%%]
set statusline+=Col:%v
set statusline+=Buf:#%n
set statusline+=[%b][0x%B]
set statusline+=%{fugitive#statusline()}

" tabbing ish
set shiftwidth=2
set tabstop=2
set expandtab
set smarttab
set autoindent
set wildmenu

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Thank you, Gary
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Clear the search buffer when hitting return
function! MapCR()
  nnoremap <cr> :nohlsearch<cr>
endfunction
call MapCR()

" jump to alternate file
nnoremap <leader><leader> <c-^>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" OPEN FILES IN DIRECTORY OF CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>v :vsplit %%

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <leader>n :call RenameFile()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CUSTOM AUTOCMDS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
augroup vimrcEx
  " Clear all autocmds in the group
  autocmd!
  " Jump to last cursor position unless it's invalid or in an event handler
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Leave the return key alone when in command line windows, since it's used
  " to run commands there.
  autocmd! CmdwinEnter * :unmap <cr>
  autocmd! CmdwinLeave * :call MapCR()
augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" don't add comment prefix when opening new lines
set formatoptions-=o

" override javascript commenting
let g:tcomment_types = {
  \ 'javascript': '// %s',
  \ 'javascript_inline': '// %s',
  \ 'javascript_block': '// %s',
  \ 'javaScript': '// %s',
  \ 'javaScript_inline': '// %s',
  \ 'javaScript_block': '// %s',
  \ }

" searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" it's better than grep
set grepprg=ack

" yank to system clipboard
set clipboard=unnamed

" don't manage working directory
let g:ctrlp_working_path_mode = 0

" ctrlp ignores
let g:ctrlp_custom_ignore = {
  \ 'dir': 'build$\|\.git$\|\.storyboardc$\|\.svn$\|target$\|\.unpack$\|vendor$\|tmp/cache$\|ib\.xcodeproj$',
  \ 'file': 'ctags$\|\.ccignore$\|\.DS_Store$\|\.gitignore$\|\.repl_history$',
  \ 'link': '',
  \ }

" open multiple files in separate tabs
let g:ctrlp_open_multiple_files = 't'

" make tabs and trailing space obvious
set list listchars=tab:>-,trail:-
" highlight SpecialKey ctermbg=red guibg=red

" Vimux mappings
nmap <Leader>c :VimuxPromptCommand<CR>
nmap <Leader>r :VimuxRunLastCommand<CR>
nmap <Leader>R :call VimuxInterruptRunner() \| call VimuxRunLastCommand()<CR>
nmap <Leader>t :call VimuxRunCommand('rake spec files=' . bufname('%'))<CR>

" whitespace cleanup - largely "yanked" from:
" http://technotales.wordpress.com/2010/03/31/preserve-a-vim-function-that-keeps-your-state/
function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let pos = getpos('.')
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call setpos('.', pos)
endfunction

nmap <Leader>w :call Preserve('%s/\s\+$//e')<CR>

" tab cycling
map <C-L> :tabnext<CR>
map <C-H> :tabprevious<CR>

" make the current split the only one and turn diff off
nmap <Leader>do :only! \| :diffoff!<CR>

" snipmate
let g:snipMate = {}
let g:snipMate.scope_aliases = {}
let g:snipMate.scope_aliases['ruby'] = 'ruby,motion'

" jslint script
nmap <Leader>j :!jslint %<CR>

