# vi rules
set -o vi

export EDITOR="mvim -v"

# prompt
#   * __git_ps1 is from bash git completion, so must come last. ish.
export PS1='\u@\h:\w$(__git_ps1 " (%s)")\n> '

export PATH=$HOME/bin:/usr/local/bin:/usr/local/sbin:$PATH
export ACK_PAGER="less -R"

if [ -f "$(brew --prefix)/etc/bash_completion" ]; then
  source $(brew --prefix)/etc/bash_completion
fi

# local stuff
if [ -f ~/.bashrc.local ]; then
  source ~/.bashrc.local
fi

# rbenv setup
if which rbenv &> /dev/null; then eval "$(rbenv init -)"; fi

# direnv setup
export DIRENV_LOG_FORMAT=""
if which direnv &> /dev/null; then eval "$(direnv hook bash)"; fi

# function t() {
#   if [ $# -lt 1 ] || ! [[ "$1" =~ ^[[:digit:]]$ ]]; then
#     echo "usage: t <num executions> [command]"
#     # remove execution from history if it was invalid
#     history -d $((HISTCMD-1))
#     return 1
#   fi
#
#   local n=$1; shift
#   local cmd=$*
#
#   # use last command in shell history if none is provided
#   if [ -z "$cmd" ]; then
#     cmd=$(fc -ln -1)
#     # no idea why this needs to be a separate command...
#     cmd=$(echo $cmd | sed 's/^ *//g')
#   fi
#
#   # reduce to base command if a previous t invocation
#   if [[ "$cmd" =~ ^[[:space:]]*t[[:space:]]+[[:digit:]]+ ]]; then
#     cmd=$(echo $cmd | sed 's/^\s*t\s\+[0-9]\+\s*//')
#   fi
#
#   echo "running '$cmd' $n times"
#   for ((i=1; i<=n; i++)); do
#     eval $cmd
#   done
#
#   # overwrite history with the expanded command
#   history -s "t $n $cmd"
# }

alias g="git"

# make completion work for g
# http://askubuntu.com/questions/62095/how-to-alias-git-to-g-so-that-bash-completion-rules-are-preserved
complete -o bashdefault -o default -o nospace -F __git_wrap__git_main g 2>/dev/null \
    || complete -o default -o nospace -F __git_wrap__git_main g

# git prompt custumizations
export GIT_PS1_SHOWDIRTYSTATE=1
export GIT_PS1_SHOWSTASHSTATE=1
export GIT_PS1_SHOWUNTRACKEDFILES=1
export GIT_PS1_SHOWUPSTREAM='verbose'
export REBEL_HOME=/opt/jrebel
export PATH=${REBEL_HOME}/bin:${PATH}

alias ldd='otool -L'
alias vimm='vim ~/Library/Application\ Support/MailMate/Resources/KeyBindings/Custom.plist'
alias spd='cd ~/Library/Containers/com.bohemiancoding.sketch/Data/Library/Application\ Support/sketch/Plugins'
alias t='todo.sh'
alias psxc='ps -ef | grep -i "[x]code"'
alias fuxc="kill -9 $(ps -ef | grep -i '[x]code' | awk '{ print $2; }')"
alias fudd='rm -rf $HOME/Library/Developer/Xcode/DerivedData'
alias ls='ls -G'
alias lsid='security find-identity -p codesigning'

# brew aliases
alias bru="brew update && brew outdated"
alias lsl='lsregister -dump'
alias lsk='lsregister -kill -r -domain local -domain system -domain user'
alias b="bundle"
alias be="b exec"
alias bi="b install"
alias biv="b install --path vendor"
alias bu="b update"
alias bake="be rake"
alias r="rails"
alias tml="tmux list-sessions"
alias tma="tmux attach-session"
alias tmc="clear && tmux clear-history"
alias tmk="tmux kill-session"
alias tm="tmux new-session \; \
  split-window -v -l 24 \; split-window -h -l 84 \; select-pane -t 1 \; split-window -h -l 84 \; \
  select-pane -t 0 \; \
  split-window -v -l 24 \; split-window -h -l 84 \; select-pane -t 1 \; split-window -h -l 84 \; \
  select-pane -t 0 \;"
alias st='tmux rename-window $(basename $(pwd))'
alias vi=vim

if [ "$(uname)" == "Darwin" ]; then
  alias vim='mvim -v'
fi
